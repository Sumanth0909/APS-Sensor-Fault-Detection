'''
For any ML Project, the TRAINING PIPELINE is as follows -
Data ingestion-> Data validation-> Data transformation-> Model trainer-> Model evaluation-> Model pusher
(There is nothing called as "Testing" pipeline)

For each of these components(blocks), we will create one class
'''
# Three dots (...) is equal to = "pass" keyword

from dataclasses import dataclass

@dataclass    
class DataIngestionArtifact:
    feature_store_file_path:str
    train_file_path:str           # these 3 are the outputs that will be generated by this component 
    test_file_path:str

@dataclass
class DataValidationArtifact:
    report_file_path:str     # "report_file_path" variable contains location for "report.yaml" file

@dataclass
class DataTransformationArtifact:
    transform_object_path:str
    transformed_train_path:str   # these 4 are the outputs that will be generated by this component
    transformed_test_path:str   # all the 4 will be just 'locations' - so, string datatype
    target_encoder_path:str

@dataclass
class ModelTrainerArtifact:
    model_path:str 
    f1_train_score:float 
    f1_test_score:float

@dataclass    
class ModelEvaluationArtifact:
    is_model_accepted:bool
    improved_accuracy:float

@dataclass    
class ModelPusherArtifact:
    pusher_model_dir:str 
    saved_model_dir:str
